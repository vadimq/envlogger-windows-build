diff --git a/com_google_riegeli/riegeli/bytes/fd_writer.cc b/com_google_riegeli/riegeli/bytes/fd_writer.cc
index 2e2c751..1dbdd9a 100644
--- a/com_google_riegeli/riegeli/bytes/fd_writer.cc
+++ b/com_google_riegeli/riegeli/bytes/fd_writer.cc
@@ -1,3 +1,47 @@
+// Copyright (c) 1999, Google Inc.
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//     * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//     * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//     * Neither the name of Google Inc. nor the names of its
+// contributors may be used to endorse or promote products derived from
+// this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+#include <unistd.h>
+
+static ssize_t pwrite(int fd, const void* buf, size_t count, off_t offset) {
+  off_t orig_offset = lseek(fd, 0, SEEK_CUR);
+  if (orig_offset == (off_t)-1)
+    return -1;
+  if (lseek(fd, offset, SEEK_CUR) == (off_t)-1)
+    return -1;
+  ssize_t len = write(fd, buf, count);
+  if (len < 0)
+    return len;
+  if (lseek(fd, orig_offset, SEEK_SET) == (off_t)-1)
+    return -1;
+  return len;
+}
 // Copyright 2017 Google LLC
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
@@ -12,6 +56,10 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+#define fsync(fd) FlushFileBuffers((HANDLE)_get_osfhandle((fd)))
+
 // Make `pwrite()` and `ftruncate()` available.
 #if !defined(_XOPEN_SOURCE) || _XOPEN_SOURCE < 500
 #undef _XOPEN_SOURCE
@@ -88,7 +136,8 @@ inline void FdWriterBase::InitializePos(
   if (assumed_pos == absl::nullopt) {
     // Flags are needed only if `assumed_pos == absl::nullopt`. Avoid `fcntl()`
     // otherwise.
-    flags = fcntl(dest, F_GETFL);
+    //flags = fcntl(dest, F_GETFL);
+    flags = O_RDWR;
     if (ABSL_PREDICT_FALSE(flags < 0)) {
       FailOperation("fcntl()");
       return;
